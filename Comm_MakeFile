######################## DO NOT EDIT THIS FILE #######################
######################## USE makefile IN EACH PROJECT ################

############################# 基本选项设置 #############################


CFLAGS = /nologo /c $(CFLAGS)
LFLAGS = /nologo $(LFLAGS)
ASMFLAGS = /nologo /c $(ASMFLAGS)
RCFLAGS = /nologo $(RCFLAGS)
SYS_LIBS = $(SYS_LIBS)
LIB_OPTION = /nologo $(LIB_OPTION) 

# 我习惯使用 MY_LIB_PATH 环境变量作为自己常用库的目录。
# 这里加上平台子目录
!IF "$(MY_LIB_PATH)" != ""
MY_LIB_PATH = $(MY_LIB_PATH)\$(Configuration)\$(Platform)
!ENDIF

##################### 将SOURCES中的多个空格变为一个 ####################

# replace all /t to sapce
SOURCES = $(SOURCES:	= )
ASM_SOURCES = $(ASM_SOURCES:	= )

# replace multi sapce to one space
SOURCES = $(SOURCES:  = )
SOURCES = $(SOURCES:  = )
SOURCES = $(SOURCES:  = )
SOURCES = $(SOURCES:  = )
SOURCES = $(SOURCES:  = )

ASM_SOURCES = $(ASM_SOURCES:  = )
ASM_SOURCES = $(ASM_SOURCES:  = )
ASM_SOURCES = $(ASM_SOURCES:  = )
ASM_SOURCES = $(ASM_SOURCES:  = )
ASM_SOURCES = $(ASM_SOURCES:  = )

RC_SOURCES = $(RC_SOURCES:  = )
RC_SOURCES = $(RC_SOURCES:  = )
RC_SOURCES = $(RC_SOURCES:  = )
RC_SOURCES = $(RC_SOURCES:  = )
RC_SOURCES = $(RC_SOURCES:  = )

DATA_FILES = $(DATA_FILES:  = )
DATA_FILES = $(DATA_FILES:  = )
DATA_FILES = $(DATA_FILES:  = )
DATA_FILES = $(DATA_FILES:  = )
DATA_FILES = $(DATA_FILES:  = )
DATA_FILES = $(DATA_FILES:  = )



########################## 判断是C 还是 CPP  ###########################

!IF "$(SOURCES:.cpp=.x)" != "$(SOURCES)"
SOURCE_TYPE = cpp
!ELSEIF "$(SOURCES:.CPP=.x)" != "$(SOURCES)"
SOURCE_TYPE = cpp
!ELSE
SOURCE_TYPE = c
!ENDIF

############################## 设置OBJS ################################

## 这一段是将 SOURCES 中的所有.c .cpp 文件替换为.obj文件，
## 并在前面加上 obj\Debug|Release\

# .c文件
!IF "$(SOURCE_TYPE)" == "c"

# DEBUG
!IF "$(Configuration)" == "Debug" 
OBJS = $(SOURCES:.c =.obj obj\Debug\) ## 注意空格
# RELEASE
!ELSE 
OBJS = $(SOURCES:.c =.obj obj\Release\)
!ENDIF

# 处理倒数第一个
OBJS = $(OBJS:.c=.obj) ## 注意没有空格

# .cpp文件
!ELSEIF "$(SOURCE_TYPE)" == "cpp"

# DEBUG
!IF "$(Configuration)" == "Debug" 
OBJS = $(SOURCES:.cpp =.obj obj\Debug\) ## 注意空格

# RELEASE
!ELSE 
OBJS = $(SOURCES:.cpp =.obj obj\Release\)
!ENDIF
# 处理倒数第一个
OBJS = $(OBJS:.cpp=.obj) ## 注意没有空格

!ENDIF

# 处理第一个obj; 设置OBJS_DIR
# DEBUG
!IF "$(Configuration)" == "Debug" 
OBJS = obj\Debug\$(OBJS)
OBJS_DIR = obj\Debug\
# RELEASE
!ELSE 
OBJS = obj\Release\$(OBJS)
OBJS_DIR = obj\Release\
!ENDIF

# 没有SOURCES的情况，全部置空。
!IF "$(SOURCES)" == ""
OBJS =
OBJS_DIR =
!ENDIF

############### 将ASM文件编译得到的.obj文件加入到OBJS宏 ################
# 判断如果asm文件列表不为空
!IF "$(ASM_SOURCES)" != ""

# DEBUG
!IF "$(Configuration)" == "Debug" 
ASM_OBJS = $(ASM_SOURCES:.asm =.obj obj\Debug\) ## 注意空格
# RELEASE
!ELSE 
ASM_OBJS = $(ASM_SOURCES:.asm =.obj obj\Release\)
!ENDIF

# 处理倒数第一个asm
ASM_OBJS = $(ASM_OBJS:.asm=.obj) ## 注意没有空格

# 处理第一个obj; 设置OBJS_DIR
ASM_OBJS = obj\$(Configuration)\$(ASM_OBJS)
OBJS_DIR = obj\$(Configuration)\


!ENDIF

############### 将rc文件编译得到的.res文件加入到OBJS宏 ################
# 判断如果asm文件列表不为空
!IF "$(RC_SOURCES)" != ""

!IF "$(Configuration)" == "Debug" 
RCS = $(RC_SOURCES:.rc =.res obj\Debug\) ## 注意空格
# RELEASE
!ELSE 
RCS = $(RC_SOURCES:.rc =.res obj\Release\)
!ENDIF

# 处理倒数第一个asm
RCS = $(RCS:.rc=.res) ## 注意没有空格

# 处理第一个obj; 设置OBJS_DIR
RCS = obj\$(Configuration)\$(RCS)
OBJS_DIR = obj\$(Configuration)\

!ENDIF

OBJS = $(ASM_OBJS) $(OBJS) $(RCS)

############################# 设置OBJS结束 #############################


######################### 设置了TINY_PE相关选项  ########################

## 参考文档：
## Smaller exe files from Visual C++
## http://andrewl.dreamhosters.com/archive/60094446.txt

## 经过测试 在VS2012环境下 /ALIGN /FILEALIGN 选项会造成无法运行，而且优化的作用有限。不使用。
## 如果编译exe 必须设定 /ENTRY:main 否则会找不到入口函数：
## LNK2001: unresolved external symbol _mainCRTStartup
## 由于入口函数不是_mainCRTStartup，造成main函数的参数argc argv是不对的，
## 因此代码中不可使用main函数参数，会造成程序异常。
## 而使用 GetCommandLine API获得命令行参数。或者采用上面参考文档链接中解决办法

!IF "$(TINY_PE)" == "TRUE"
### 自定义的c运行时库。
SYS_LIBS = $(SYS_LIBS) $(TARGET_DIR)\msvcrt.lib 
### 必要的编译链接选项，CRT库函数不inline。
LFLAGS  = $(LFLAGS) /NODEFAULTLIB
CFLAGS = $(CFLAGS) /GS- /D "TINY_PE" /D "_NO_CRT_STDIO_INLINE"

### 不调试，加上优化信息。
!IF "$(Configuration)" == "Release"
CFLAGS = $(CFLAGS) /O1
!ENDIF

### 根据DLL 或者 EXE 设置不同的入口函数
!IF "$(TARGET_TYPE)" == "dll"
LFLAGS  = $(LFLAGS) /ENTRY:DllMain
!ELSEIF "$(TARGET_TYPE)" == "DLL"
LFLAGS  = $(LFLAGS) /ENTRY:DllMain
### 是EXE
!ELSE 
LFLAGS  = $(LFLAGS) /ENTRY:main
!ENDIF

!ENDIF # !IF "$(TINY_PE)" == "TRUE"
####################### 设置了TINY_PE相关选项结束  ######################

########################### 设置了TARGET相关  ##########################
TARGET_DIR = ..\BUILD\$(Configuration)\$(Platform)

!IF "$(TARGET_TYPE)" == "dll"
LFLAGS = $(LFLAGS) /DLL 
!ELSEIF "$(TARGET_TYPE)" == "DLL"
LFLAGS = $(LFLAGS) /DLL
!ELSE
LFLAGS = $(LFLAGS)

!ENDIF

!IF "$(TARGET)" == ""
TARGET = $(ProjectName)
!ENDIF
######################### 设置了TARGET相关结束  #########################


###################### 设置 Debug | Release 编译选项  ###################
## Debug
!IF "$(Configuration)" == "Debug"
CFLAGS = $(CFLAGS) /Zi 
ASMFLAGS =  $(ASMFLAGS) /Zi 
LFLAGS = $(LFLAGS) /DEBUG /PDB:"$(TARGET_DIR)\$(TARGET).pdb" 
## Release
!ELSE 
CFLAGS = $(CFLAGS)
!ENDIF

!IF "$(SOURCE_TYPE)" == "cpp"
CFLAGS = $(CFLAGS) /D "CPP"
!ENDIF

!IF "$(Platform)" == "x64"
LFLAGS = $(LFLAGS) /MACHINE:X64
LIB_OPTION = $(LIB_OPTION) /MACHINE:X64
MC = ml64.exe
ASMFLAGS = $(ASMFLAGS) /DX64
!ELSE
LFLAGS = $(LFLAGS) /MACHINE:X86
LIB_OPTION = $(LIB_OPTION) /MACHINE:X86
MC = ml.exe
ASMFLAGS = $(ASMFLAGS) /DX86
!ENDIF

############################# 设置完成，开始编译链接  ####################
all : mkdebug $(OBJS_DIR) $(TARGET_DIR)\$(TARGET).$(TARGET_TYPE) copy_data_files


copy_data_files : $(DATA_FILES)
!IF "$(DATA_FILES)" != ""
	for %i in ($(DATA_FILES)) do copy /Y %i $(TARGET_DIR)\
!ENDIF

mkdebug : 
	echo OBJ_DIR : $(OBJS_DIR) 
	echo TARGET : $(TARGET_DIR)\$(TARGET).$(TARGET_TYPE)
	echo OBJS : $(OBJS)
	echo MY_LIBS : $(MY_LIBS)
	echo MY_LIB_PATH : $(MY_LIB_PATH)
	echo DATA_FILES : $(DATA_FILES)

!IF "$(OBJS_DIR)" != ""
$(OBJS_DIR) :
	if not exist $(OBJS_DIR) mkdir $(OBJS_DIR)\
!ENDIF


# 编译
!IF "$(Configuration)" == "Debug"
{.\}.cpp{obj\Debug\}.obj:
   $(CC) $(CFLAGS) /Fo$(OBJS_DIR)\ $<

{.\}.c{obj\Debug\}.obj:
   $(CC) $(CFLAGS) /Fo$(OBJS_DIR)\ $<


!ELSE
{.\}.cpp{obj\Release\}.obj:
   $(CC) $(CFLAGS) /Fo$(OBJS_DIR)\ $<

{.\}.c{obj\Release\}.obj:
   $(CC) $(CFLAGS) /Fo$(OBJS_DIR)\ $<



!ENDIF

{.\}.asm{obj\$(Configuration)\}.obj:
   $(MC) $(ASMFLAGS) /Fo$(OBJS_DIR)\ $<

{.\}.rc{obj\$(Configuration)\}.res:
   rc.exe $(RCFLAGS) /fo $@ $<

$(TARGET_DIR)\$(TARGET).$(TARGET_TYPE) : $(OBJS)
	echo Platform = $(Platform) Configuration = $(Configuration)
	if not exist $(TARGET_DIR) mkdir $(TARGET_DIR)
!IF "$(TARGET_TYPE)" == "lib"
	lib.exe $(LIB_OPTION) /out:$@  $(OBJS)
!ELSE 
	link.exe $(LFLAGS) /out:$@  $(OBJS) $(SYS_LIBS) $(MY_LIBS) /LIBPATH:$(TARGET_DIR) /LIBPATH:$(MY_LIB_PATH)
!ENDIF

clean : 
	if exist $(TARGET_DIR)\$(TARGET).$(TARGET_TYPE) del $(TARGET_DIR)\$(TARGET).$(TARGET_TYPE)
	if exist $(TARGET_DIR)\$(TARGET).pdb del $(TARGET_DIR)\$(TARGET).pdb
	if exist $(TARGET_DIR)\$(TARGET).exp del $(TARGET_DIR)\$(TARGET).exp
	if exist $(TARGET_DIR)\$(TARGET).ilk del $(TARGET_DIR)\$(TARGET).ilk
!IF "$(OBJS_DIR)" != ""
	if exist $(OBJS_DIR) rd /S /Q $(OBJS_DIR)
!ENDIF

rebuild : clean all